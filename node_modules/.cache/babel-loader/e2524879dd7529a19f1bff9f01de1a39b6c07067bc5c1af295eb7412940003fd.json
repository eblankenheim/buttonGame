{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Evan\\\\Desktop\\\\LearnCode\\\\on-button\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isOn, setIsOn] = useState(false);\n\n  // Function to toggle the button's state\n  const toggleButton = () => {\n    console.log(`Button clicked. Toggling state. Current state: ${isOn ? \"ON\" : \"OFF\"}`);\n    setIsOn(!isOn);\n  };\n  useEffect(() => {\n    if (isOn) {\n      console.log(\"Button is ON. Setting a random timer to turn it OFF.\");\n      const randomTimeout = Math.floor(Math.random() * 5000); // Random time between 0 and 5000 ms\n      console.log(`Random timeout set: ${randomTimeout}ms`);\n      const timer = setTimeout(() => {\n        console.log(\"Random timer triggered. Turning button OFF.\");\n        setIsOn(false); // Turns it off after the random timeout\n      }, randomTimeout);\n\n      // Cleanup the timer when the component unmounts or when the button is turned off\n      return () => {\n        console.log(\"Cleanup: Clearing timeout.\");\n        clearTimeout(timer);\n      };\n    } else {\n      console.log(\"Button is OFF. No timer is active.\");\n    }\n  }, [isOn]); // Re-run the effect only when isOn changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleButton,\n      style: {\n        backgroundColor: isOn ? \"green\" : \"red\"\n      },\n      children: isOn ? \"ON\" : \"OFF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"8lOBNNx9kKBYVIm9aq2L1dPZgaw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","isOn","setIsOn","toggleButton","console","log","randomTimeout","Math","floor","random","timer","setTimeout","clearTimeout","style","styles","container","children","onClick","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Evan/Desktop/LearnCode/on-button/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst App = () => {\n  const [isOn, setIsOn] = useState(false);\n\n  // Function to toggle the button's state\n  const toggleButton = () => {\n    console.log(\n      `Button clicked. Toggling state. Current state: ${isOn ? \"ON\" : \"OFF\"}`\n    );\n    setIsOn(!isOn);\n  };\n\n  useEffect(() => {\n    if (isOn) {\n      console.log(\"Button is ON. Setting a random timer to turn it OFF.\");\n\n      const randomTimeout = Math.floor(Math.random() * 5000); // Random time between 0 and 5000 ms\n      console.log(`Random timeout set: ${randomTimeout}ms`);\n\n      const timer = setTimeout(() => {\n        console.log(\"Random timer triggered. Turning button OFF.\");\n        setIsOn(false); // Turns it off after the random timeout\n      }, randomTimeout);\n\n      // Cleanup the timer when the component unmounts or when the button is turned off\n      return () => {\n        console.log(\"Cleanup: Clearing timeout.\");\n        clearTimeout(timer);\n      };\n    } else {\n      console.log(\"Button is OFF. No timer is active.\");\n    }\n  }, [isOn]); // Re-run the effect only when isOn changes\n\n  return (\n    <div style={styles.container}>\n      <button\n        onClick={toggleButton}\n        style={{\n          backgroundColor: isOn ? \"green\" : \"red\",\n        }}\n      >\n        {isOn ? \"ON\" : \"OFF\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;;EAEvC;EACA,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzBC,OAAO,CAACC,GAAG,CACT,kDAAkDJ,IAAI,GAAG,IAAI,GAAG,KAAK,EACvE,CAAC;IACDC,OAAO,CAAC,CAACD,IAAI,CAAC;EAChB,CAAC;EAEDL,SAAS,CAAC,MAAM;IACd,IAAIK,IAAI,EAAE;MACRG,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MAEnE,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;MACxDL,OAAO,CAACC,GAAG,CAAC,uBAAuBC,aAAa,IAAI,CAAC;MAErD,MAAMI,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC7BP,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;QAC1DH,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;MAClB,CAAC,EAAEI,aAAa,CAAC;;MAEjB;MACA,OAAO,MAAM;QACXF,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzCO,YAAY,CAACF,KAAK,CAAC;MACrB,CAAC;IACH,CAAC,MAAM;MACLN,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACnD;EACF,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACEH,OAAA;IAAKe,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,eAC3BlB,OAAA;MACEmB,OAAO,EAAEd,YAAa;MACtBU,KAAK,EAAE;QACLK,eAAe,EAAEjB,IAAI,GAAG,OAAO,GAAG;MACpC,CAAE;MAAAe,QAAA,EAEDf,IAAI,GAAG,IAAI,GAAG;IAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACtB,EAAA,CA7CID,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA+CT,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}